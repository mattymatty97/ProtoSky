plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.10.0'
}

version = project.mod_version
group = project.maven_group
def buildnumber = 1

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://jitpack.io' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation( annotationProcessor( "io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_fabric_version}"))
}

base {
	archivesName = project.archives_base_name
}

def placeholders = [
		'version': project.version,
		'mc_version': project.minecraft_version,
		'loader_version': project.loader_version,
		'api_version': project.fabric_version,
		'build': buildnumber
]

processResources {
	inputs.properties placeholders
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand placeholders
	}
	filesMatching("placeholders.properties") {
		expand placeholders
	}
	outputs.upToDateWhen { false }
}

loom {
	accessWidenerPath = file("src/main/resources/protosky.accesswidener")
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

tasks.register("updateBuildNumber"){
	doLast {
		Properties props = new Properties()

		File propsFile = new File("build_version.properties")

		try {
			props.load(propsFile.newDataInputStream())

			String prevVersion = (props.getProperty('mod_version'))

			if (prevVersion.equals(project.mod_version)) {

				buildnumber = (((props.getProperty('mod_buildnumber')) as Integer) + 1)
				placeholders.build = buildnumber

			}
		}catch (IOException ignored){
		}

		props.setProperty('mod_buildnumber', buildnumber.toString())
		props.setProperty('mod_version', project.mod_version.toString())

		props.store(propsFile.newWriter(), null)

		props.load(propsFile.newDataInputStream())

	}
	outputs.upToDateWhen { false }
}


tasks.register("FinalizeBuild", Copy) {
	from "$buildDir/libs"
	into "output/libs"
	include "${project.archives_base_name}-${project.version}.jar"
	rename { String filename ->
		return "${project.archives_base_name}-${project.version}_build_${buildnumber}.jar"
	}
	doLast {
		mkdir "output/libs"
		println "Output File:"
		println "${project.archives_base_name}-${project.version}_build_${buildnumber}.jar"
	}
	outputs.upToDateWhen { false }
}

tasks.processResources.shouldRunAfter updateBuildNumber
tasks.compileJava.finalizedBy updateBuildNumber
tasks.updateBuildNumber.shouldRunAfter compileJava
tasks.build.finalizedBy FinalizeBuild